ggplot(Femenino, aes(hora_retiro, total)) + geom_point() +
geom_smooth(method="lm", col="blue") + # Añadir la línea de regresión al gráfico
stat_regline_equation(label.x = 3, label.y = 7)  + # Añadir la ecuación
labs(x = "Hora de Retiro", y ="Total de Insectos") +
ggtitle("Total de Insectos en inflorescencias femeninas") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
# Para que las horas en x estén como en diagonal
theme_classic()
# Gráfico del modelo lineal para flores femeninas y masculinas
ggplot(Femenino, aes(hora_retiro, total)) + geom_point() +
geom_smooth(method="lm", col="blue") + # Añadir la línea de regresión al gráfico
stat_regline_equation(label.x = 3, label.y = 7)  + # Añadir la ecuación
# Gráfico del modelo lineal para flores femeninas y masculinas
ggplot(Femenino, aes(hora_retiro, total)) + geom_point() +
geom_smooth(method="lm", col="blue") + # Añadir la línea de regresión al gráfico
stat_regline_equation(label.x = 3, label.y = 7)   # Añadir la ecuación
# Gráfico del modelo lineal para flores femeninas y masculinas
ggplot(Femenino, aes(hora_retiro, total)) + geom_point() +
geom_smooth(method="lm", col="blue") + # Añadir la línea de regresión al gráfico
stat_regline_equation(label.x = 3, label.y = 7)   # Añadir la ecuación
# Gráfico del modelo lineal para flores femeninas y masculinas
ggplot(Femenino, aes(hora_retiro, total)) + geom_point() +
geom_smooth(method="lm", col="blue") + # Añadir la línea de regresión al gráfico
stat_regline_equation(label.x = 10, label.y = 4)   # Añadir la ecuación
# Gráfico del modelo lineal para flores femeninas y masculinas
ggplot(Femenino, aes(hora_retiro, total)) + geom_point() +
geom_smooth(method="lm", col="blue") + # Añadir la línea de regresión al gráfico
stat_regline_equation(label.x = 15, label.y = 50)   # Añadir la ecuación
# Gráfico del modelo lineal para flores femeninas y masculinas
ggplot(Femenino, aes(hora_retiro, total)) + geom_point() +
geom_smooth(method="lm", col="blue") + # Añadir la línea de regresión al gráfico
stat_regline_equation(label.x = 3, label.y = 3)   # Añadir la ecuación
# Gráfico del modelo lineal para flores femeninas y masculinas
ggplot(Femenino, aes(hora_retiro, total)) + geom_point() +
geom_smooth( method ="lm", col="blue")  # Añadir la línea de regresión al gráfico
# Gráfico del modelo lineal para flores femeninas y masculinas
ggplot(Femenino, aes(hora_retiro, total)) + geom_point() +
geom_smooth( method ="lm", col="blue") +  # Añadir la línea de regresión al gráfico
# stat_regline_equation(label.x = 3, label.y = 3)   # Añadir la ecuación
# labs(x = "Hora de Retiro", y ="Total de Insectos") +
# ggtitle("Total de Insectos en inflorescencias femeninas") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
# Para que las horas en x estén como en diagonal
theme_classic()
library(lubridate)
# Transformar de horas a minutos para poder graficar la regresión en ambos sexos
Femenino$minutos <- hour(hms(Time.Training)) *60 + minute(hms(Time.Training))
# Transformar de horas a minutos para poder graficar la regresión en ambos sexos
Femenino$minutos <- hour(hms(Femenino$hora_retiro)) *60 + minute(hms(Femenino$hora_retiro))
library(chron)
View(Femenino)
Femenino$minutos <- 60 * 24 * as.numeric(times(Femenino$hora_retiro))
install.packages("chron")
Femenino$minutos <- 60 * 24 * as.numeric(times(Femenino$hora_retiro))
library(chron)
Femenino$minutos <- 60 * 24 * as.numeric(times(Femenino$hora_retiro))
Femenino$hora_retiro <- as.POSIXlt(Femenino$hora_retiro)
Femenino$hora_retiro = hms::as_hms(Femenino$hora_retiro)
# Datetime
Femenino <- Femenino %>%
mutate(datetime3 = as.POSIXct(paste(fecha, hora_retiro), format = "%Y-%m-%d %H:%M"))
# Daytime con formato de hora
Femenino <- Femenino %>%
mutate(daytime3 = hms::as_hms(datetime3))
Femenino <- Femenino %>%
dplyr::mutate(hora_retiro = as.POSIXct(hora_retiro, format="%H:%M:%S")) %>%
dplyr::mutate(daytime2 = hms::as_hms(daytime2))  %>%
dplyr::mutate(mintime2 = as.numeric(difftime(daytime2, hms::as_hms(00:00:00), units = "mins")))
# Daytime con formato de hora
Femenino <- Femenino %>%
mutate(daytime3 = hms::as_hms(datetime3))
Femenino <- Femenino %>%
dplyr::mutate(hora_retiro = as.POSIXct(hora_retiro, format="%H:%M:%S")) %>%
dplyr::mutate(daytime3 = hms::as_hms(daytime3))  %>%
dplyr::mutate(mintime3 = as.numeric(difftime(daytime3, hms::as_hms(00:00:00), units = "mins")))
Femenino$hora_retiro <- format(as.POSIXct(Femenino$hora_retiro,
format="%Y-%m-%d %H:%M:%S"), format="%H:%M:%S")
# Datetime
Femenino <- Femenino %>%
mutate(datetime3 = as.POSIXct(paste(fecha, hora_retiro), format = "%Y-%m-%d %H:%M"))
# Daytime con formato de hora
Femenino <- Femenino %>%
mutate(daytime3 = hms::as_hms(datetime3))
Femenino <- Femenino %>%
dplyr::mutate(hora_retiro = as.POSIXct(hora_retiro, format="%H:%M:%S")) %>%
dplyr::mutate(daytime3 = hms::as_hms(daytime3))  %>%
dplyr::mutate(mintime3 = as.numeric(difftime(daytime3, hms::as_hms(00:00:00), units = "mins")))
# Crear un subset que solo tenga los conteos de flores femeninas y otro solo de masculinas
Femenino <- subset(ins_ta, sexo == "Femenino")
Masculino <- subset(ins_ta, sexo == "Masculino")
# Transformar de horas a minutos para poder graficar la regresión en ambos sexos
Femenino$hora_retiro = hms::as_hms(Femenino$hora_retiro)
# Crear un subset que solo tenga los conteos de flores femeninas y otro solo de masculinas
Femenino <- subset(ins_ta, sexo == "Femenino")
Masculino <- subset(ins_ta, sexo == "Masculino")
# Transformar de horas a minutos para poder graficar la regresión en ambos sexos
Femenino$hora_retiro <- asn.numeric(Femenino$hora_retiro)
# Transformar de horas a minutos para poder graficar la regresión en ambos sexos
Femenino$hora_retiro <- as.numeric(Femenino$hora_retiro)
# Crear un subset que solo tenga los conteos de flores femeninas y otro solo de masculinas
Femenino <- subset(ins_ta, sexo == "Femenino")
Masculino <- subset(ins_ta, sexo == "Masculino")
# Transformar de horas a minutos para poder graficar la regresión en ambos sexos
Femenino$hora_retiro <- str_split(Femenino$hora_retiro, " ", simplify = TRUE)
Femenino$hora_retiro <- c(Femenino$hora_retiro[,2])
Femenino$hora_retiro <- ymd_hm(Femenino$hora_retiro)
# Transformar de horas a minutos para poder graficar la regresión en ambos sexos
Femenino$hora_retiro <- str_split(Femenino$hora_retiro, " ", simplify = TRUE)
Femenino$hora_retiro <- c(Femenino$hora_retiro[,2])
# Transformar de horas a minutos para poder graficar la regresión en ambos sexos
Femenino$hora_retiro <- str_split(Femenino$hora_retiro, " ", simplify = TRUE)
# Crear un subset que solo tenga los conteos de flores femeninas y otro solo de masculinas
Femenino <- subset(ins_ta, sexo == "Femenino")
Masculino <- subset(ins_ta, sexo == "Masculino")
Femenino$hora_retiro <- hms::as_hms(Femenino$hora_retiro)
Femenino$hora_retiro <- format(as.POSIXct(Femenino$hora_retiro,
format="%H:%M:%S"), format="%H:%M:%S")
# Transformar de horas a minutos para poder graficar la regresión en ambos sexos
Femenino$hora_retiro <- format(as.POSIXct(Femenino$hora_retiro,
format="%H:%M:%S"), format="%H:%M:%S")
# Crear un subset que solo tenga los conteos de flores femeninas y otro solo de masculinas
Femenino <- subset(ins_ta, sexo == "Femenino")
Masculino <- subset(ins_ta, sexo == "Masculino")
# Transformar de horas a minutos para poder graficar la regresión en ambos sexos
Femenino$hora_retiro <-hour(hms(Femenino$hora_retiro) *60 + minute(hms(Femenino$hora_retiro)
# Transformar de horas a minutos para poder graficar la regresión en ambos sexos
Femenino$hora_retiro <-hour(hms(Femenino$hora_retiro)) *60 + minute(hms(Femenino$hora_retiro))
# Transformar de horas a minutos para poder graficar la regresión en ambos sexos
minutos <-hour(hms(Femenino$hora_retiro)) * 60 + minute(hms(Femenino$hora_retiro))
class(hora_retiro)
class(Femenino$hora_retiro)
# Transformar formato de character a formato de hora en hora_retiro
Femenino$hora_retiro <- strtoi(as.difftime(Femenino$hora_retiro, format = "%H:%M:%S", units = "mins"))
# Crear un subset que solo tenga los conteos de flores femeninas y otro solo de masculinas
Femenino <- subset(ins_ta, sexo == "Femenino")
# Transformar formato de character a formato de hora en hora_retiro
Femenino$hora_retiro <- strtoi(as.difftime(Femenino$hora_retiro, format = "%H:%M:%S", units = "mins"))
Femenino$hora_retiro <- format(as.POSIXct(Femenino$hora_retiro,
format="character"), format="%H:%M:%S")
# Crear un subset que solo tenga los conteos de flores femeninas y otro solo de masculinas
Femenino <- subset(ins_ta, sexo == "Femenino")
Masculino <- subset(ins_ta, sexo == "Masculino")
Femenino$hora_retiro <- format(as.POSIXct(Femenino$hora_retiro,
format="character"), format="%H:%M:%S")
# Datetime
Femenino <- Femenino %>%
mutate(datetime3 = as.POSIXct(paste(fecha, hora_retiro), format = "%Y-%m-%d %H:%M"))
# Crear un subset que solo tenga los conteos de flores femeninas y otro solo de masculinas
Femenino <- subset(ins_ta, sexo == "Femenino")
Masculino <- subset(ins_ta, sexo == "Masculino")
Femenino$hora_retiro <- format(as.POSIXct(Femenino$hora_retiro,
format="character"), format="%H:%M:%S")
# Crear un subset que solo tenga los conteos de flores femeninas y otro solo de masculinas
Femenino <- subset(ins_ta, sexo == "Femenino")
Masculino <- subset(ins_ta, sexo == "Masculino")
# Datetime
Femenino <- Femenino %>%
mutate(datetime3 = as.POSIXct(paste(fecha, hora_retiro), format = "%Y-%m-%d %H:%M"))
# Datetime
Femenino <- Femenino %>%
mutate(datetime3 = as.POSIXct(paste(fecha, hora_retiro), format = "%Y-%m-%d %H:%M"))
# Daytime con formato de hora
Femenino <- Femenino %>%
mutate(daytime3 = hms::as_hms(datetime3))
Femenino <- Femenino %>%
dplyr::mutate(hora_retiro = as.POSIXct(hora_retiro, format="%H:%M:%S")) %>%
dplyr::mutate(daytime3 = hms::as_hms(daytime3))  %>%
dplyr::mutate(mintime3 = as.numeric(difftime(daytime3, hms::as_hms(00:00:00), units = "mins")))
# Transformar formato de character a formato de hora en hora_retiro
Femenino$hora_retiro <- as.Date(Femenino$hora_retiro,format='%H:%M:%S')
# Transformar formato de character a formato de hora en hora_retiro
Femenino$hora_retiro <- strptime(Femenino$hora_retiro, format = "%H:%M:%S")
# Crear un subset que solo tenga los conteos de flores femeninas y otro solo de masculinas
Femenino <- subset(ins_ta, sexo == "Femenino")
Masculino <- subset(ins_ta, sexo == "Masculino")
# Transformar formato de character a formato de hora en hora_retiro
Femenino$hora_retiro <- strptime(Femenino$hora_retiro, format = "%H:%M:%S")
# Crear un subset que solo tenga los conteos de flores femeninas y otro solo de masculinas
Femenino <- subset(ins_ta, sexo == "Femenino")
Masculino <- subset(ins_ta, sexo == "Masculino")
# Transformar formato de character a formato de hora en hora_retiro
Femenino$hora_retiro <- as.POSIXct(Femenino$hora_retiro, format = "%H:%M:%S")
# Transformar formato de character a formato de hora en hora_retiro
Femenino$hora_retiro <- as.POSIXct(Femenino$hora_retiro,format="%H:%M:%S")
# Crear un subset que solo tenga los conteos de flores femeninas y otro solo de masculinas
Femenino <- subset(ins_ta, sexo == "Femenino")
Masculino <- subset(ins_ta, sexo == "Masculino")
# Transformar formato de character a formato de hora en hora_retiro
Femenino$hora_retiro <- as.POSIXct(Femenino$hora_retiro,format="%H:%M:%S")
Femenino$hora_retiro <- hms::as_hms(Femenino$hora_retiro)
# Crear un subset que solo tenga los conteos de flores femeninas y otro solo de masculinas
Femenino <- subset(ins_ta, sexo == "Femenino")
Masculino <- subset(ins_ta, sexo == "Masculino")
Femenino$hora_retiro <- hms::as_hms(Femenino$hora_retiro)
# Crear un subset que solo tenga los conteos de flores femeninas y otro solo de masculinas
Femenino <- subset(ins_ta, sexo == "Femenino")
Masculino <- subset(ins_ta, sexo == "Masculino")
Femenino$hora_retiro <- strptime(Femenino$hora_retiro, format = "%H:%M")
# Crear un subset que solo tenga los conteos de flores femeninas y otro solo de masculinas
Femenino <- subset(ins_ta, sexo == "Femenino")
Masculino <- subset(ins_ta, sexo == "Masculino")
# Transformar formato de character a formato de hora en hora_retiro
Femenino$hora_retiro <- as.POSIXct(Femenino$hora_retiro,format="%H:%M")
Femenino$hora_retiro <- hms::as_hms(Femenino$hora_retiro)
# Transformar de horas a minutos para poder graficar la regresión en ambos sexos
Femenino$minuto <-hour(hms(Femenino$hora_retiro)) * 60 + minute(hms(Femenino$hora_retiro))
library(chon)
library(chron)
install.packages("chron")
library(chron)
library(chron)
# Transformar de horas a minutos para poder graficar la regresión en ambos sexos
Femenino$minuto <-hour(hms(Femen ino$hora_retiro)) * 60 + minute(hms(Femenino$hora_retiro))
# Transformar de horas a minutos para poder graficar la regresión en ambos sexos
Femenino$minuto <-hour(hms(Femenino$hora_retiro)) * 60 + minute(hms(Femenino$hora_retiro))
# Transformar de horas a minutos para poder graficar la regresión en ambos sexos
Femenino$minuto = as.numeric(difftime(hora_retiro, hms::as_hms(00:00:00), units = "mins"))
# Transformar de horas a minutos para poder graficar la regresión en ambos sexos
Femenino$minuto = as.numeric(difftime(Femenino$hora_retiro, hms::as_hms(00:00:00), units = "mins"))
class(Femenino$minuto)
View(Femenino)
# Crear una nueva columna que contenga el total de conteos de insectos por cada fila
ins_ta$total <- rowSums(ins_ta[, 12:88], na.rm = TRUE)
# Transformar formato de character a formato de hora en hora_retiro
ins_ta$hora_retiro <- as.POSIXct(ins_ta$hora_retiro,format="%H:%M")
ins_ta$hora_retiro <- hms::as_hms(ins_ta$hora_retiro)
class(ins_ta$minuto)
View(ins_ta)
# Transformar de horas a minutos para poder graficar la regresión en ambos sexos
ins_ta$minuto = as.numeric(difftime(ins_ta$hora_retiro, hms::as_hms(00:00:00), units = "mins"))
class(ins_ta$minuto)
# Crear un subset que solo tenga los conteos de flores femeninas y otro solo de masculinas
Femenino <- subset(ins_ta, sexo == "Femenino")
Masculino <- subset(ins_ta, sexo == "Masculino")
# Probar normalidad para ambos dataframes
# No son normales pero lo vamos a ignorar momentáneamente
# Para seguir con el ejercicio
hist(Femenino$total)
hist(Masculino$total)
# Probar linearidad para ambos dataframes
# Tampoco son lineares, pero seguiremos con el ejercicio
plot(total ~ as.factor(hora_retiro), data = Femenino, type = "p")
plot(total ~ as.factor(hora_retiro), data = Masculino, type = "p")
# Modelo lineal aplicado a los subset de ambos sexos
lm_F <- lm(total ~ hora_retiro, data = Femenino)
lm_M <- lm(total ~ hora_retiro, data = Masculino)
# Resumen de los modelos lineales de ambos sexos
summary(lm_F)
summary(lm_M)
# Resumen de los modelos lineales de ambos sexos
summary(lm_F)
# Crear una nueva columna que contenga el total de conteos de insectos por cada fila
ins_ta$total <- rowSums(ins_ta[, 12:88], na.rm = TRUE)
# Transformar formato de character a formato de hora en hora_retiro
ins_ta$hora_retiro <- as.POSIXct(ins_ta$hora_retiro,format="%H:%M")
ins_ta$hora_retiro <- hms::as_hms(ins_ta$hora_retiro)
# Transformar de horas a minutos para poder graficar la regresión en ambos sexos
ins_ta$minuto = as.numeric(difftime(ins_ta$hora_retiro, hms::as_hms(00:00:00), units = "mins"))
class(ins_ta$minuto)
# Crear un subset que solo tenga los conteos de flores femeninas y otro solo de masculinas
Femenino <- subset(ins_ta, sexo == "Femenino")
Masculino <- subset(ins_ta, sexo == "Masculino")
# Probar normalidad para ambos dataframes
# No son normales pero lo vamos a ignorar momentáneamente
# Para seguir con el ejercicio
hist(Femenino$total)
hist(Masculino$total)
# Probar linearidad para ambos dataframes
# Tampoco son lineares, pero seguiremos con el ejercicio
plot(total ~ minuto, data = Femenino, type = "p")
plot(total ~ minuto, data = Masculino, type = "p")
# Modelo lineal aplicado a los subset de ambos sexos
lm_F <- lm(total ~ minuto, data = Femenino)
lm_M <- lm(total ~ minuto, data = Masculino)
# Resumen de los modelos lineales de ambos sexos
summary(lm_F)
summary(lm_M)
# Modelo lineal aplicado a los subset de ambos sexos
lm_F <- lm(total ~ minuto, data = Femenino)
lm_M <- lm(total ~ minuto, data = Masculino)
# Resumen de los modelos lineales de ambos sexos
summary(lm_F)
summary(lm_M)
# Probar linearidad para ambos dataframes
# Tampoco son lineares, pero seguiremos con el ejercicio
plot(total ~ minuto, data = Femenino, type = "p")
plot(total ~ minuto, data = Masculino, type = "p")
# Histograma para verificar normalidad en los datos crudos de ambos sexos
# y en los residuos del modelo lineal
hist(lm_F$residuals)
hist(lm_M$residuals)
# Probar homocedasticidad para los modelos lineares de ambos sexos
par(mar = c(4, 2))
plot(lm_F)
par(mar = c(4, 4, 2, 2))
plot(lm_F)
# Probar homocedasticidad para los modelos lineares de ambos sexos
par(mar = c(4, 4, 2, 2))
plot(lm_F)
# Gráfico del modelo lineal para flores femeninas y masculinas
ggplot(Femenino, aes(minuto, total)) + geom_point() +
geom_smooth( method ="lm", col="blue") +  # Añadir la línea de regresión al gráfico
# stat_regline_equation(label.x = 3, label.y = 3)   # Añadir la ecuación
# labs(x = "Hora de Retiro", y ="Total de Insectos") +
# ggtitle("Total de Insectos en inflorescencias femeninas") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
# Para que las horas en x estén como en diagonal
theme_classic()
# Descargar y cargar paquetes importantes
library(ggplot2)
# Descargar y cargar paquetes importantes
library(ggplot2)
# Gráfico del modelo lineal para flores femeninas y masculinas
ggplot(Femenino, aes(minuto, total)) + geom_point() +
geom_smooth( method ="lm", col="blue") +  # Añadir la línea de regresión al gráfico
stat_regline_equation(label.x = 3, label.y = 3)   # Añadir la ecuación
# Gráfico del modelo lineal para flores femeninas y masculinas
ggplot(Femenino, aes(minuto, total)) + geom_point() +
geom_smooth( method ="lm", col="blue") +  # Añadir la línea de regresión al gráfico
stat_regline_equation(label.x = 3, label.y = 3) +  # Añadir la ecuación
labs(x = "Hora de Retiro", y ="Total de Insectos") +
ggtitle("Total de Insectos en inflorescencias femeninas") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
# Para que las horas en x estén como en diagonal
theme_classic()
library(broom)
library(ggpubr)
library(lubridate)
# Gráfico del modelo lineal para flores femeninas y masculinas
ggplot(Femenino, aes(minuto, total)) + geom_point() +
geom_smooth( method ="lm", col="blue") +  # Añadir la línea de regresión al gráfico
stat_regline_equation(label.x = 3, label.y = 3) +  # Añadir la ecuación
labs(x = "Hora de Retiro", y ="Total de Insectos") +
ggtitle("Total de Insectos en inflorescencias femeninas") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
# Para que las horas en x estén como en diagonal
theme_classic()
# Gráfico del modelo lineal para flores femeninas y masculinas
ggplot(Femenino, aes(minuto, total)) + geom_point() +
geom_smooth( method ="lm", col="blue") +  # Añadir la línea de regresión al gráfico
stat_regline_equation(label.x = 800, label.y = 1500) +  # Añadir la ecuación
labs(x = "Hora de Retiro", y ="Total de Insectos") +
ggtitle("Total de Insectos en inflorescencias femeninas") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
# Para que las horas en x estén como en diagonal
theme_classic()
ggplot(Masculino, aes(minuto, total)) + geom_point() +
geom_smooth( method ="lm", col="blue") +  # Añadir la línea de regresión al gráfico
stat_regline_equation(label.x = 800, label.y = 1500) +  # Añadir la ecuación
labs(x = "Hora de Retiro", y ="Total de Insectos") +
ggtitle("Total de Insectos en inflorescencias femeninas") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
# Para que las horas en x estén como en diagonal
theme_classic()
ggplot(Masculino, aes(minuto, total)) + geom_point() +
geom_smooth( method ="lm", col="blue") +  # Añadir la línea de regresión al gráfico
stat_regline_equation(label.x = 1100, label.y = 1300) +  # Añadir la ecuación
labs(x = "Hora de Retiro", y ="Total de Insectos") +
ggtitle("Total de Insectos en inflorescencias femeninas") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
# Para que las horas en x estén como en diagonal
theme_classic()
ggplot(Masculino, aes(minuto, total)) + geom_point() +
geom_smooth( method ="lm", col="blue") +  # Añadir la línea de regresión al gráfico
stat_regline_equation(label.x = 1000, label.y = 1300) +  # Añadir la ecuación
labs(x = "Hora de Retiro", y ="Total de Insectos") +
ggtitle("Total de Insectos en inflorescencias femeninas") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
# Para que las horas en x estén como en diagonal
theme_classic()
# Gráfico del modelo lineal para flores femeninas y masculinas
ggplot(Femenino, aes(minuto, total)) + geom_point() +
geom_smooth( method ="lm", col="blue") +  # Añadir la línea de regresión al gráfico
stat_regline_equation(label.x = 800, label.y = 1500) +  # Añadir la ecuación
labs(x = "Hora de Retiro", y ="Total de Insectos") +
ggtitle("Total de Insectos en inflorescencias femeninas") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
# Para que las horas en x estén como en diagonal
theme_classic()
# Gráfico del modelo lineal para flores femeninas y masculinas
ggplot(Femenino, aes(minuto, total)) + geom_point() +
geom_smooth( method ="lm", col="blue") +  # Añadir la línea de regresión al gráfico
stat_regline_equation(label.x = 1000, label.y = 1500) +  # Añadir la ecuación
labs(x = "Hora de Retiro", y ="Total de Insectos") +
ggtitle("Total de Insectos en inflorescencias femeninas") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
# Para que las horas en x estén como en diagonal
theme_classic()
# Gráfico del modelo lineal para flores femeninas y masculinas
ggplot(Femenino, aes(minuto, total)) + geom_point() +
geom_smooth( method ="lm", col="blue") +  # Añadir la línea de regresión al gráfico
stat_regline_equation(label.x = 800, label.y = 1500) +  # Añadir la ecuación
labs(x = "Hora de Retiro", y ="Total de Insectos") +
ggtitle("Total de Insectos en inflorescencias femeninas") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
# Para que las horas en x estén como en diagonal
theme_classic()
ggplot(Masculino, aes(minuto, total)) + geom_point() +
geom_smooth( method ="lm", col="blue") +  # Añadir la línea de regresión al gráfico
stat_regline_equation(label.x = 1000, label.y = 1300) +  # Añadir la ecuación
labs(x = "Hora de Retiro", y ="Total de Insectos") +
ggtitle("Total de Insectos en inflorescencias femeninas") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
# Para que las horas en x estén como en diagonal
theme_classic()
# Gráfico del modelo lineal para flores femeninas y masculinas
ggplot(Femenino, aes(minuto, total)) + geom_point() +
geom_smooth( method ="lm", col="blue") +  # Añadir la línea de regresión al gráfico
stat_regline_equation(label.x = 800, label.y = 1500) +  # Añadir la ecuación
labs(x = "Hora de Retiro", y ="Total de Insectos") +
ggtitle("Total de Insectos en inflorescencias femeninas") +
# Para que las horas en x estén como en diagonal
theme_classic()
ggplot(Masculino, aes(minuto, total)) + geom_point() +
geom_smooth( method ="lm", col="blue") +  # Añadir la línea de regresión al gráfico
stat_regline_equation(label.x = 1000, label.y = 1300) +  # Añadir la ecuación
labs(x = "Hora de Retiro", y ="Total de Insectos") +
ggtitle("Total de Insectos en inflorescencias femeninas") +
# Para que las horas en x estén como en diagonal
theme_classic()
install.packages("lme4")
# Abrir el script .txt
ins_ta <- read.table("/Users/orchidaceae/Desktop/Tagua.Research/Copia_insectos_tagua.txt",header=T,sep="\t",dec=",")
# Abrir el script .txt
ins_ta <- read.table("/Users/orchidaceae/Desktop/Maestría/Clases de la universidad/Segundo semestre/Curso análisi
s/Tagua.Research/scripts/Copia_insectos_tagua.txt",header=T,sep="\t",dec=",")
insectos_tagua <- read.delim("~/Desktop/Maestría/Clases de la universidad/Segundo semestre/Curso análisis/Tagua.Research/scripts/Copia de insectos_tagua.txt")
View(insectos_tagua)
# Descargar y cargar paquetes importantes
library(ggplot2)
library(dplyr)
library(broom)
library(ggpubr)
library(lubridate)
View(insectos_tagua)
# Crear una nueva columna que contenga el total de conteos de insectos por cada fila
insectos_tagua$total <- rowSums(ins_ta[, 5:30], na.rm = TRUE)
# Crear una nueva columna que contenga el total de conteos de insectos por cada fila
insectos_tagua$total <- rowSums(insectos_tagua[, 5:30], na.rm = TRUE)
View(insectos_tagua)
# Transformar formato de character a formato de hora en hora_retiro
insectos_tagua$hora_retiro <- as.POSIXct(insectos_tagua$hora_retiro,format="%H:%M")
insectos_tagua$hora_retiro <- hms::as_hms(insectos_tagua$hora_retiro)
# Transformar de horas a minutos para poder graficar la regresión en ambos sexos
insectos_tagua$minuto = as.numeric(difftime(insectos_tagua$hora_retiro, hms::as_hms(00:00:00), units = "mins"))
class(ins_ta$minuto)
class(insectos_tagua$minuto)
# Crear un subset que solo tenga los conteos de flores femeninas y otro solo de masculinas
Femenino <- subset(insectos_tagua, sexo == "Femenino")
ins_ta <- read.delim("~/Desktop/Maestría/Clases de la universidad/Segundo semestre/Curso análisis/Tagua.Research/scripts/Copia de insectos_tagua.txt")
View(ins_ta)
# Crear una nueva columna que contenga el total de conteos de insectos por cada fila
ins_ta$total <- rowSums(insectos_tagua[, 6:31], na.rm = TRUE)
# Crear una nueva columna que contenga el total de conteos de insectos por cada fila
ins_ta$total <- rowSums(ins_ta[, 6:31], na.rm = TRUE)
View(ins_ta)
ins_ta <- read.delim("~/Desktop/Maestría/Clases de la universidad/Segundo semestre/Curso análisis/Tagua.Research/scripts/Copia de insectos_tagua.txt")
View(ins_ta)
library(ggplot2)
library(dplyr)
library(broom)
library(ggpubr)
library(lubridate)
View(ins_ta)
# Crear una nueva columna que contenga el total de conteos de insectos por cada fila
ins_ta$total <- rowSums(ins_ta[, 6:31], na.rm = TRUE)
# Transformar formato de character a formato de hora en hora_retiro
ins_ta$hora_retiro <- as.POSIXct(ins_ta$hora_retiro,format="%H:%M")
ins_ta$hora_retiro <- hms::as_hms(ins_ta$hora_retiro)
# Transformar de horas a minutos para poder graficar la regresión en ambos sexos
ins_ta$minuto = as.numeric(difftime(ins_ta$hora_retiro, hms::as_hms(00:00:00), units = "mins"))
class(ins_ta$minuto)
# Crear un subset que solo tenga los conteos de flores femeninas y otro solo de masculinas
Femenino <- subset(ins_ta, sexo == "Femenino")
Masculino <- subset(ins_ta, sexo == "Masculino")
# Probar normalidad para ambos dataframes
# No son normales pero lo vamos a ignorar momentáneamente
# Para seguir con el ejercicio
hist(Femenino$total)
hist(Masculino$total)
# Probar linearidad para ambos dataframes
# Tampoco son lineares, pero seguiremos con el ejercicio
plot(total ~ minuto, data = Femenino, type = "p")
plot(total ~ minuto, data = Masculino, type = "p")
# Modelo lineal aplicado a los subset de ambos sexos
lm_F <- lm(total ~ minuto, data = Femenino)
lm_M <- lm(total ~ minuto, data = Masculino)
# Resumen de los modelos lineales de ambos sexos
summary(lm_F)
summary(lm_M)
# Histograma para verificar normalidad en los datos crudos de ambos sexos
# y en los residuos del modelo lineal
hist(lm_F$residuals)
hist(lm_M$residuals)
# Probar homocedasticidad para los modelos lineares de ambos sexos
par(mar = c(4, 4, 2, 2))
plot(lm_F)
par(mar = c(4, 4, 2, 2))
plot(lm_M)
# Gráfico del modelo lineal para flores femeninas y masculinas
ggplot(Femenino, aes(minuto, total)) + geom_point() +
geom_smooth( method ="lm", col="blue") +  # Añadir la línea de regresión al gráfico
stat_regline_equation(label.x = 800, label.y = 1500) +  # Añadir la ecuación
labs(x = "Hora de Retiro", y ="Total de Insectos") +
ggtitle("Total de Insectos en inflorescencias femeninas") +
theme_classic()
ggplot(Masculino, aes(minuto, total)) + geom_point() +
geom_smooth( method ="lm", col="blue") +  # Añadir la línea de regresión al gráfico
stat_regline_equation(label.x = 1000, label.y = 1300) +  # Añadir la ecuación
labs(x = "Hora de Retiro", y ="Total de Insectos") +
ggtitle("Total de Insectos en inflorescencias femeninas") +
theme_classic()
