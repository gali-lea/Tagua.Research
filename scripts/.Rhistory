# Define el valor mínimo y el máximo
lower <- 1; upper <- 5
# Crea una variable squaresum que tenga al inicio 0
squaresum <- 0
for (ii in lower:upper) { # cat para imprimir
cat(ii, ii^2, "/n") # /n para poner en dos filas
squaresum = squaresum + ii^2 # acumular valores al cuadrado
}
cat("the sum of the Gianverse")
cat(ii, ii^2, "\n") # \n para poner en dos filas
for (ii in lower:upper) { # cat para imprimir
cat(ii, ii^2, "\n") # \n para poner en dos filas
squaresum = squaresum + ii^2 # acumular valores al cuadrado
}
cat("the sum of the Gianverse")
# Abrir el script .txt
Fem1 <- read.table("insectos_tagua.txt",header=T,sep="\t",dec=",")
# Abrir el script .txt
Fem1 <- read.table("/Users/orchidaceae/Desktop/Tagua.Research/insectos_tagua.txt",header=T,sep="\t",dec=",")
# Descargar y cargar el paquete dplyr y ggplot2
library(dplyr)
library(ggplot2)
# Descargar y cargar el paquete dplyr y ggplot2
library(dplyr)
library(ggplot2)
# Abrir el script .txt
ins_ta <- read.table("/Users/orchidaceae/Desktop/Tagua.Research/insectos_tagua.txt",header=T,sep="\t",dec=",")
View(ins_ta)
# Crear una nueva columna que contenga el total de conteos de insectos por cada fila
ins_ta %>% mutate(total = sum(ins_ta[12:88]))
# Crear una nueva columna que contenga el total de conteos de insectos por cada fila
ins_ta %>% mutate(total = sum(ins_ta[12:88]), na.rm = TRUE)
View(ins_ta)
# Descargar y cargar el paquete lubridate (para crear nuevas columnas) y ggplot2
library(lubridate)
# Crear una nueva columna que contenga el total de conteos de insectos por cada fila
ins_ta2 %>% mutate(total = sum(ins_ta[12:88]), na.rm = TRUE)
# Crear una nueva columna que contenga el total de conteos de insectos por cada fila
ins_ta %>% mutate(total = sum(ins_ta[12:88]), na.rm = TRUE)
# Crear una nueva columna que contenga el total de conteos de insectos por cada fila
ins_ta %>% mutate(total = sum(ins_ta[12:88]))
# Crear una nueva columna que contenga el total de conteos de insectos por cada fila
ins_ta %>% mutate(total = sum(ins_ta[,12:88]))
# Crear una nueva columna que contenga el total de conteos de insectos por cada fila
ins_ta %>% mutate(total = sum(ins_ta$[,12:88]))
# Crear una nueva columna que contenga el total de conteos de insectos por cada fila
ins_ta %>% mutate(total = sum([,12:88]))
# Crear una nueva columna que contenga el total de conteos de insectos por cada fila
ins_ta %>% mutate(total = sum([,12:88])
# Crear una nueva columna que contenga el total de conteos de insectos por cada fila
ins_ta %>% mutate(total = rowSum([,12:88])
# Crear una nueva columna que contenga el total de conteos de insectos por cada fila
ins_ta %>% mutate(total = rowSum(ins_ta$[,12:88])
View(ins_ta)
# Crear una nueva columna que contenga el total de conteos de insectos por cada fila
ins_ta %>% mutate(total = rowSum(ins_ta[,12:88], na.rm=TRUE))
# Crear una nueva columna que contenga el total de conteos de insectos por cada fila
ins_ta %>% mutate(total = rowsum(ins_ta[,12:88], na.rm=TRUE))
ins_ta <- read.table("/Users/orchidaceae/Desktop/Tagua.Research/insectos_tagua.txt",header=T,sep="\t",dec=",")
# Descargar y cargar el paquete lubridate (para crear nuevas columnas) y ggplot2
library(lubridate)
library(ggplot2)
# Crear una nueva columna que contenga el total de conteos de insectos por cada fila
ins_ta %>% mutate(total = rowsum(ins_ta[,12:88], na.rm=TRUE))
library(dplyr)
# Crear una nueva columna que contenga el total de conteos de insectos por cada fila
ins_ta %>% mutate(total = rowsum(ins_ta[,12:88], na.rm=TRUE))
# Crear una nueva columna que contenga el total de conteos de insectos por cada fila
ins_ta %>% mutate(total = rowSum(ins_ta[,12:88], na.rm=TRUE))
# Crear una nueva columna que contenga el total de conteos de insectos por cada fila
ins_ta %>% mutate(total = rowSums(ins_ta[,12:88], na.rm=TRUE))
ins_ta$total <- rowSums(ins_ta[, 12:88], na.rm = TRUE)
View(ins_ta)
# Crear un subset que solo tenga los conteos de flores femeninas y otro solo de masculinas
Femenino <- subset(ins_ta, sexo == "Femenino")
Masculino <- subset(ins_ta, sexo == "Masculino")
# Hacer un gráfico de barras del número de insectos capturados en cada sexo
# x = hora_retiro
# y = total de insectos
ggplot(Femenino, aes(x = hora_retiro, y = total)) +
geom_bar() +  # Usar puntos para representar los datos
labs(x = "Hora de Retiro", y ="Total de Insectos") +  # Etiquetas de ejes
ggtitle("Total de Insectos por Hora de Retiro")
# Hacer un gráfico de barras del número de insectos capturados en cada sexo
# x = hora_retiro
# y = total de insectos
ggplot(Femenino, aes(x = hora_retiro, y = total)) +
geom_point() +  # Usar puntos para representar los datos
labs(x = "Hora de Retiro", y ="Total de Insectos") +  # Etiquetas de ejes
ggtitle("Total de Insectos por Hora de Retiro")
# Hacer un gráfico de barras del número de insectos capturados en cada sexo
# x = hora_retiro
# y = total de insectos
ggplot(Femenino, aes(x = hora_retiro, y = total)) +
geom_point() +  # Usar puntos para representar los datos
labs(x = "Hora de Retiro", y ="Total de Insectos") +  # Etiquetas de ejes
ggtitle("Total de Insectos en inflorescencias femeninas") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(Masculino, aes(x = hora_retiro, y = total)) +
geom_point() +  # Usar puntos para representar los datos
labs(x = "Hora de Retiro", y ="Total de Insectos") +  # Etiquetas de ejes
ggtitle("Total de Insectos en inflorescencias masculinas") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Hacer un gráfico de barras del número de insectos capturados en cada sexo
# x = hora_retiro
# y = total de insectos
ggplot(Femenino, aes(x = hora_retiro, y = total)) +
geom_point() +
labs(x = "Hora de Retiro", y ="Total de Insectos") +
ggtitle("Total de Insectos en inflorescencias femeninas") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(Masculino, aes(x = hora_retiro, y = total)) +
geom_point() +
labs(x = "Hora de Retiro", y ="Total de Insectos") +
ggtitle("Total de Insectos en inflorescencias masculinas") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Abrir el script .txt
ins_ta <- read.table("/Users/orchidaceae/Desktop/Tagua.Research/insectos_tagua.txt",header=T,sep="\t",dec=",")
# Descargar y cargar el paquete ggplot2
library(ggplot2)
# Crear una nueva columna que contenga el total de conteos de insectos por cada fila
ins_ta$total <- rowSums(ins_ta[, 12:88], na.rm = TRUE)
# Descargar y cargar el paquete ggplot2
library(ggplot2)
# Crear una nueva columna que contenga el total de conteos de insectos por cada fila
ins_ta$total <- rowSums(ins_ta[, 12:88], na.rm = TRUE)
# Crear un subset que solo tenga los conteos de flores femeninas y otro solo de masculinas
Femenino <- subset(ins_ta, sexo == "Femenino")
Masculino <- subset(ins_ta, sexo == "Masculino")
# Retirar muestreos en flores femeninas para los cuales no registramos la hora exacta
Femenino <- Femenino[-c(86:90,99:120),]
View(Femenino)
# Retirar muestreos en flores femeninas para los cuales no registramos la hora exacta
Femenino <- Femenino[-c(86:90),]
# Abrir el script .txt
ins_ta <- read.table("/Users/orchidaceae/Desktop/Tagua.Research/insectos_tagua.txt",header=T,sep="\t",dec=",")
# Descargar y cargar el paquete ggplot2
library(ggplot2)
# Crear una nueva columna que contenga el total de conteos de insectos por cada fila
ins_ta$total <- rowSums(ins_ta[, 12:88], na.rm = TRUE)
# Crear un subset que solo tenga los conteos de flores femeninas y otro solo de masculinas
Femenino <- subset(ins_ta, sexo == "Femenino")
Masculino <- subset(ins_ta, sexo == "Masculino")
# Retirar muestreos en flores femeninas para los cuales no registramos la hora exacta
Femenino <- Femenino[-c(86:90),]
# Retirar muestreos en flores femeninas para los cuales no registramos la hora exacta
x <-
Femenino <- Femenino[-c(86:90,99:120),]
# Retirar muestreos en flores femeninas para los cuales no registramos la hora exacta
x <- 86:90,99:120
# Retirar muestreos en flores femeninas para los cuales no registramos la hora exacta
x <- c(86:90,99:120)
Femenino <- Femenino[-x,]
View(Femenino)
Femenino <- Femenino[-x,]
# Modelo lineal aplicado a los subset de ambos sexos
lm_F <- lm(hora_retiro ~ total, data = Femenino)
# Modelo lineal aplicado a los subset de ambos sexos
lm_F <- lm(hora_retiro ~ total, data = Femenino, rm.na = F)
View(Femenino)
# Abrir el script .txt
ins_ta <- read.table("/Users/orchidaceae/Desktop/Tagua.Research/insectos_tagua.txt",header=T,sep="\t",dec=",")
# Descargar y cargar el paquete ggplot2
library(ggplot2)
# Crear una nueva columna que contenga el total de conteos de insectos por cada fila
ins_ta$total <- rowSums(ins_ta[, 12:88], na.rm = TRUE)
# Crear un subset que solo tenga los conteos de flores femeninas y otro solo de masculinas
Femenino <- subset(ins_ta, sexo == "Femenino")
Masculino <- subset(ins_ta, sexo == "Masculino")
# Retirar muestreos en flores femeninas para los cuales no registramos la hora exacta
x <- c(86:90,99:120)
Femenino <- Femenino[-x,]
Femenino <- Femenino[-x]
Femenino <- Femenino[,-x]
Femenino <- Femenino[,-x]
Femenino <- Femenino[-x,]
# Abrir el script .txt
ins_ta <- read.table("/Users/orchidaceae/Desktop/Tagua.Research/insectos_tagua.txt",header=T,sep="\t",dec=",")
# Descargar y cargar el paquete ggplot2
library(ggplot2)
# Crear una nueva columna que contenga el total de conteos de insectos por cada fila
ins_ta$total <- rowSums(ins_ta[, 12:88], na.rm = TRUE)
# Crear un subset que solo tenga los conteos de flores femeninas y otro solo de masculinas
Femenino <- subset(ins_ta, sexo == "Femenino")
Masculino <- subset(ins_ta, sexo == "Masculino")
# Modelo lineal aplicado a los subset de ambos sexos
lm_F <- lm(hora_retiro ~ total, data = Femenino)
View(Femenino)
# Modelo lineal aplicado a los subset de ambos sexos
lm_F <- lm(total ~ hora_retiro, data = Femenino)
# Modelo lineal aplicado a los subset de ambos sexos
lm_F <- lm(total ~ hora_retiro, data = Femenino)
lm_M <- lm(total ~ hora_retiro, data = Masculino)
# Descargar y cargar paquetes importantes
library(ggplot2)
library(dplyr)
library(broom)
library(ggpubr)
# Hacer un gráfico de barras del número de insectos capturados en cada sexo
# x = hora_retiro
# y = total de insectos
ggplot(Femenino, aes(x = hora_retiro, y = total)) +
geom_point() +
labs(x = "Hora de Retiro", y ="Total de Insectos") +
ggtitle("Total de Insectos en inflorescencias femeninas") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Resumen de los modelos lineales de ambos sexos
summary(lm_F)
summary(lm_M)
# Histograma para verificar normalidad
hist(lm_M$residuals)
# Histograma para verificar normalidad
hist(Femenino$total)
hist(Masculino$total)
# Histograma para verificar normalidad
hist(Femenino$total)
hist(Masculino$total)
hist(lm_F$residuals)
hist(lm_M$residuals)
hist(lm_F$residuals)
hist(lm_M$residuals)
# Probar normalidad para ambos dataframes
hist(Femenino$total)
hist(Masculino$total)
# Probar linearidad para ambos dataframes
plot(total ~ hora_retiro, data = Femenino)
# Probar linearidad para ambos dataframes
plot(total ~ hora_retiro, data = Femenino)
# Probar linearidad para ambos dataframes
plot(total, hora_retiro, data = Femenino)
# Probar linearidad para ambos dataframes
plot(Femenino$total ~ hora_retiro, data = Femenino)
# Probar linearidad para ambos dataframes
plot(Femenino$total ~ as.factor(hora_retiro), data = Femenino)
# Probar linearidad para ambos dataframes
plot(total ~ as.factor(hora_retiro), data = Femenino)
# Probar linearidad para ambos dataframes
plot(total ~ as.factor(hora_retiro), data = Femenino, type = "p")
# Probar linearidad para ambos dataframes
plot(total ~ as.factor(hora_retiro), data = Femenino, type = "p")
plot(total ~ as.factor(hora_retiro), data = Masculino, type = "p")
# Probar linearidad para ambos dataframes
dotchart(total ~ as.factor(hora_retiro), data = Femenino, type = "p")
# Probar linearidad para ambos dataframes
dotchart(as.numeric(total) ~ as.factor(hora_retiro), data = Femenino, type = "p")
View(Femenino)
# Modelo lineal aplicado a los subset de ambos sexos
lm_F <- lm(total ~ hora_retiro + ubicacion, data = Femenino)
lm_M <- lm(total ~ hora_retiro + ubicacion, data = Masculino)
# Resumen de los modelos lineales de ambos sexos
summary(lm_F)
summary(lm_M)
# Probar homocedasticidad para amobs dataframes
par(mfrow=c(2,2))
plot(lm_F)
plot(lm_F)
# Probar homocedasticidad para los modelos lineares de ambos sexos
par(mar = c(4, 4, 2, 2))
plot(lm_F)
par(mar = c(4, 4, 2, 2))
plot(lm_M)
# Modelo lineal aplicado a los subset de ambos sexos
lm_F <- lm(total ~ hora_retiro, data = Femenino)
lm_M <- lm(total ~ hora_retiro, data = Masculino)
# Resumen de los modelos lineales de ambos sexos
summary(lm_F)
summary(lm_M)
# Histograma para verificar normalidad en los datos crudos de ambos sexos
# y en los residuos del modelo lineal
hist(lm_F$residuals)
hist(lm_M$residuals)
# Probar homocedasticidad para los modelos lineares de ambos sexos
par(mar = c(4, 4, 2, 2))
plot(lm_F)
par(mar = c(4, 4, 2, 2))
plot(lm_M)
# Probar homocedasticidad para los modelos lineares de ambos sexos
par(mar = c(4, 4, 2, 2))
plot(lm_F)
# Probar homocedasticidad para los modelos lineares de ambos sexos
par(mar = c(2, 2))
# Probar homocedasticidad para los modelos lineares de ambos sexos
par(mar = c(4, 2))
plot(lm_F)
# Histograma para verificar normalidad en los datos crudos de ambos sexos
# y en los residuos del modelo lineal
hist(lm_F$residuals)
hist(lm_M$residuals)
# Probar homocedasticidad para los modelos lineares de ambos sexos
par(mar = c(4, 2))
plot(lm_F)
par(mar = c(4, 4, 2, 2))
plot(lm_M)
# Gráfico del modelo lineal para flores femeninas y masculinas
F.graph <- ggplot(Femenino, aes(hora_retiro, total))+ geom_point()
F.graph
# Gráfico del modelo lineal para flores femeninas y masculinas
F.graph <- ggplot(Femenino, aes(hora_retiro, total))+ geom_point() +
geom_smooth(method="lm", col="black") + # Añadir la línea de regresión al gráfico
stat_regline_equation(label.x = 3, label.y = 7)  + # Añadir la ecuación
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme_classic()
# Gráfico del modelo lineal para flores femeninas y masculinas
ggplot(Femenino, aes(hora_retiro, total))+ geom_point() +
geom_smooth(method="lm", col="black") + # Añadir la línea de regresión al gráfico
stat_regline_equation(label.x = 3, label.y = 7)  + # Añadir la ecuación
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = "Hora de Retiro", y ="Total de Insectos") +
ggtitle("Total de Insectos en inflorescencias femeninas") +
# Para que las horas en x estén como en diagonal
theme_classic()
# Gráfico del modelo lineal para flores femeninas y masculinas
ggplot(Femenino, aes(hora_retiro, total))+ geom_point() +
geom_smooth(method="lm", col="blue") + # Añadir la línea de regresión al gráfico
stat_regline_equation(label.x = 3, label.y = 7)  + # Añadir la ecuación
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = "Hora de Retiro", y ="Total de Insectos") +
ggtitle("Total de Insectos en inflorescencias femeninas") +
# Para que las horas en x estén como en diagonal
theme_classic()
# Gráfico del modelo lineal para flores femeninas y masculinas
ggplot(Femenino, aes(hora_retiro, total)) + geom_point() +
geom_smooth(method="lm", col="blue") + # Añadir la línea de regresión al gráfico
stat_regline_equation(label.x = 3, label.y = 7)  + # Añadir la ecuación
labs(x = "Hora de Retiro", y ="Total de Insectos") +
ggtitle("Total de Insectos en inflorescencias femeninas") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
# Para que las horas en x estén como en diagonal
theme_classic()
# Gráfico del modelo lineal para flores femeninas y masculinas
ggplot(Femenino, aes(hora_retiro, total)) + geom_point() +
geom_smooth(method="lm", col="blue") + # Añadir la línea de regresión al gráfico
stat_regline_equation(label.x = 3, label.y = 7)  + # Añadir la ecuación
# Gráfico del modelo lineal para flores femeninas y masculinas
ggplot(Femenino, aes(hora_retiro, total)) + geom_point() +
geom_smooth(method="lm", col="blue") + # Añadir la línea de regresión al gráfico
stat_regline_equation(label.x = 3, label.y = 7)   # Añadir la ecuación
# Gráfico del modelo lineal para flores femeninas y masculinas
ggplot(Femenino, aes(hora_retiro, total)) + geom_point() +
geom_smooth(method="lm", col="blue") + # Añadir la línea de regresión al gráfico
stat_regline_equation(label.x = 3, label.y = 7)   # Añadir la ecuación
# Gráfico del modelo lineal para flores femeninas y masculinas
ggplot(Femenino, aes(hora_retiro, total)) + geom_point() +
geom_smooth(method="lm", col="blue") + # Añadir la línea de regresión al gráfico
stat_regline_equation(label.x = 10, label.y = 4)   # Añadir la ecuación
# Gráfico del modelo lineal para flores femeninas y masculinas
ggplot(Femenino, aes(hora_retiro, total)) + geom_point() +
geom_smooth(method="lm", col="blue") + # Añadir la línea de regresión al gráfico
stat_regline_equation(label.x = 15, label.y = 50)   # Añadir la ecuación
# Gráfico del modelo lineal para flores femeninas y masculinas
ggplot(Femenino, aes(hora_retiro, total)) + geom_point() +
geom_smooth(method="lm", col="blue") + # Añadir la línea de regresión al gráfico
stat_regline_equation(label.x = 3, label.y = 3)   # Añadir la ecuación
# Gráfico del modelo lineal para flores femeninas y masculinas
ggplot(Femenino, aes(hora_retiro, total)) + geom_point() +
geom_smooth( method ="lm", col="blue")  # Añadir la línea de regresión al gráfico
# Gráfico del modelo lineal para flores femeninas y masculinas
ggplot(Femenino, aes(hora_retiro, total)) + geom_point() +
geom_smooth( method ="lm", col="blue") +  # Añadir la línea de regresión al gráfico
# stat_regline_equation(label.x = 3, label.y = 3)   # Añadir la ecuación
# labs(x = "Hora de Retiro", y ="Total de Insectos") +
# ggtitle("Total de Insectos en inflorescencias femeninas") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
# Para que las horas en x estén como en diagonal
theme_classic()
library(lubridate)
# Transformar de horas a minutos para poder graficar la regresión en ambos sexos
Femenino$minutos <- hour(hms(Time.Training)) *60 + minute(hms(Time.Training))
# Transformar de horas a minutos para poder graficar la regresión en ambos sexos
Femenino$minutos <- hour(hms(Femenino$hora_retiro)) *60 + minute(hms(Femenino$hora_retiro))
library(chron)
View(Femenino)
Femenino$minutos <- 60 * 24 * as.numeric(times(Femenino$hora_retiro))
install.packages("chron")
Femenino$minutos <- 60 * 24 * as.numeric(times(Femenino$hora_retiro))
library(chron)
Femenino$minutos <- 60 * 24 * as.numeric(times(Femenino$hora_retiro))
Femenino$hora_retiro <- as.POSIXlt(Femenino$hora_retiro)
Femenino$hora_retiro = hms::as_hms(Femenino$hora_retiro)
# Datetime
Femenino <- Femenino %>%
mutate(datetime3 = as.POSIXct(paste(fecha, hora_retiro), format = "%Y-%m-%d %H:%M"))
# Daytime con formato de hora
Femenino <- Femenino %>%
mutate(daytime3 = hms::as_hms(datetime3))
Femenino <- Femenino %>%
dplyr::mutate(hora_retiro = as.POSIXct(hora_retiro, format="%H:%M:%S")) %>%
dplyr::mutate(daytime2 = hms::as_hms(daytime2))  %>%
dplyr::mutate(mintime2 = as.numeric(difftime(daytime2, hms::as_hms(00:00:00), units = "mins")))
# Daytime con formato de hora
Femenino <- Femenino %>%
mutate(daytime3 = hms::as_hms(datetime3))
Femenino <- Femenino %>%
dplyr::mutate(hora_retiro = as.POSIXct(hora_retiro, format="%H:%M:%S")) %>%
dplyr::mutate(daytime3 = hms::as_hms(daytime3))  %>%
dplyr::mutate(mintime3 = as.numeric(difftime(daytime3, hms::as_hms(00:00:00), units = "mins")))
Femenino$hora_retiro <- format(as.POSIXct(Femenino$hora_retiro,
format="%Y-%m-%d %H:%M:%S"), format="%H:%M:%S")
# Datetime
Femenino <- Femenino %>%
mutate(datetime3 = as.POSIXct(paste(fecha, hora_retiro), format = "%Y-%m-%d %H:%M"))
# Daytime con formato de hora
Femenino <- Femenino %>%
mutate(daytime3 = hms::as_hms(datetime3))
Femenino <- Femenino %>%
dplyr::mutate(hora_retiro = as.POSIXct(hora_retiro, format="%H:%M:%S")) %>%
dplyr::mutate(daytime3 = hms::as_hms(daytime3))  %>%
dplyr::mutate(mintime3 = as.numeric(difftime(daytime3, hms::as_hms(00:00:00), units = "mins")))
# Crear un subset que solo tenga los conteos de flores femeninas y otro solo de masculinas
Femenino <- subset(ins_ta, sexo == "Femenino")
Masculino <- subset(ins_ta, sexo == "Masculino")
# Transformar de horas a minutos para poder graficar la regresión en ambos sexos
Femenino$hora_retiro = hms::as_hms(Femenino$hora_retiro)
# Crear un subset que solo tenga los conteos de flores femeninas y otro solo de masculinas
Femenino <- subset(ins_ta, sexo == "Femenino")
Masculino <- subset(ins_ta, sexo == "Masculino")
# Transformar de horas a minutos para poder graficar la regresión en ambos sexos
Femenino$hora_retiro <- asn.numeric(Femenino$hora_retiro)
# Transformar de horas a minutos para poder graficar la regresión en ambos sexos
Femenino$hora_retiro <- as.numeric(Femenino$hora_retiro)
# Crear un subset que solo tenga los conteos de flores femeninas y otro solo de masculinas
Femenino <- subset(ins_ta, sexo == "Femenino")
Masculino <- subset(ins_ta, sexo == "Masculino")
# Transformar de horas a minutos para poder graficar la regresión en ambos sexos
Femenino$hora_retiro <- str_split(Femenino$hora_retiro, " ", simplify = TRUE)
Femenino$hora_retiro <- c(Femenino$hora_retiro[,2])
Femenino$hora_retiro <- ymd_hm(Femenino$hora_retiro)
# Transformar de horas a minutos para poder graficar la regresión en ambos sexos
Femenino$hora_retiro <- str_split(Femenino$hora_retiro, " ", simplify = TRUE)
Femenino$hora_retiro <- c(Femenino$hora_retiro[,2])
# Transformar de horas a minutos para poder graficar la regresión en ambos sexos
Femenino$hora_retiro <- str_split(Femenino$hora_retiro, " ", simplify = TRUE)
# Crear un subset que solo tenga los conteos de flores femeninas y otro solo de masculinas
Femenino <- subset(ins_ta, sexo == "Femenino")
Masculino <- subset(ins_ta, sexo == "Masculino")
Femenino$hora_retiro <- hms::as_hms(Femenino$hora_retiro)
Femenino$hora_retiro <- format(as.POSIXct(Femenino$hora_retiro,
format="%H:%M:%S"), format="%H:%M:%S")
# Transformar de horas a minutos para poder graficar la regresión en ambos sexos
Femenino$hora_retiro <- format(as.POSIXct(Femenino$hora_retiro,
format="%H:%M:%S"), format="%H:%M:%S")
# Crear un subset que solo tenga los conteos de flores femeninas y otro solo de masculinas
Femenino <- subset(ins_ta, sexo == "Femenino")
Masculino <- subset(ins_ta, sexo == "Masculino")
# Transformar de horas a minutos para poder graficar la regresión en ambos sexos
Femenino$hora_retiro <-hour(hms(Femenino$hora_retiro) *60 + minute(hms(Femenino$hora_retiro)
# Transformar de horas a minutos para poder graficar la regresión en ambos sexos
Femenino$hora_retiro <-hour(hms(Femenino$hora_retiro)) *60 + minute(hms(Femenino$hora_retiro))
# Transformar de horas a minutos para poder graficar la regresión en ambos sexos
minutos <-hour(hms(Femenino$hora_retiro)) * 60 + minute(hms(Femenino$hora_retiro))
class(hora_retiro)
class(Femenino$hora_retiro)
# Transformar formato de character a formato de hora en hora_retiro
Femenino$hora_retiro <- strtoi(as.difftime(Femenino$hora_retiro, format = "%H:%M:%S", units = "mins"))
# Crear un subset que solo tenga los conteos de flores femeninas y otro solo de masculinas
Femenino <- subset(ins_ta, sexo == "Femenino")
# Transformar formato de character a formato de hora en hora_retiro
Femenino$hora_retiro <- strtoi(as.difftime(Femenino$hora_retiro, format = "%H:%M:%S", units = "mins"))
Femenino$hora_retiro <- format(as.POSIXct(Femenino$hora_retiro,
format="character"), format="%H:%M:%S")
# Crear un subset que solo tenga los conteos de flores femeninas y otro solo de masculinas
Femenino <- subset(ins_ta, sexo == "Femenino")
Masculino <- subset(ins_ta, sexo == "Masculino")
Femenino$hora_retiro <- format(as.POSIXct(Femenino$hora_retiro,
format="character"), format="%H:%M:%S")
# Datetime
Femenino <- Femenino %>%
mutate(datetime3 = as.POSIXct(paste(fecha, hora_retiro), format = "%Y-%m-%d %H:%M"))
# Crear un subset que solo tenga los conteos de flores femeninas y otro solo de masculinas
Femenino <- subset(ins_ta, sexo == "Femenino")
Masculino <- subset(ins_ta, sexo == "Masculino")
Femenino$hora_retiro <- format(as.POSIXct(Femenino$hora_retiro,
format="character"), format="%H:%M:%S")
# Crear un subset que solo tenga los conteos de flores femeninas y otro solo de masculinas
Femenino <- subset(ins_ta, sexo == "Femenino")
Masculino <- subset(ins_ta, sexo == "Masculino")
# Datetime
Femenino <- Femenino %>%
mutate(datetime3 = as.POSIXct(paste(fecha, hora_retiro), format = "%Y-%m-%d %H:%M"))
# Datetime
Femenino <- Femenino %>%
mutate(datetime3 = as.POSIXct(paste(fecha, hora_retiro), format = "%Y-%m-%d %H:%M"))
# Daytime con formato de hora
Femenino <- Femenino %>%
mutate(daytime3 = hms::as_hms(datetime3))
Femenino <- Femenino %>%
dplyr::mutate(hora_retiro = as.POSIXct(hora_retiro, format="%H:%M:%S")) %>%
dplyr::mutate(daytime3 = hms::as_hms(daytime3))  %>%
dplyr::mutate(mintime3 = as.numeric(difftime(daytime3, hms::as_hms(00:00:00), units = "mins")))
